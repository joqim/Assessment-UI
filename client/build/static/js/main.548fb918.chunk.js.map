{"version":3,"sources":["components/Section.js","components/Question.js","components/Teacher.js","components/Header.js","App.js","index.js"],"names":["SectionPage","props","state","borderWidth","boxShadow","borderRadius","overflow","w","p","pt","mt","fontWeight","as","lineHeight","isTruncated","color","fontSize","m","mb","Component","QuestionPage","handleKeyDownForRadio","event","key","radioValues","console","log","push","newRadioValue","setState","handleKeyDownForCheck","checkValues","newCheckValue","handleNewRadioValueChange","target","value","handleNewCheckValueChange","renderSingleChoice","direction","map","size","variant","ml","placeholder","onChange","onKeyDown","renderMultipleChoice","colorScheme","renderParagraph","resize","h","renderFileUpload","borderColor","orientation","allowMultiple","maxParallelUploads","name","handleQuestionTypeChange","selectedQuestionType","handleTotalMarksChange","totalMarks","handleNegativeMarksChange","negativeMarks","columns","spacing","height","this","children","leftIcon","TeacherPage","handleAddQuestion","questionsArray","questions","handleDeleteQuestion","shift","handleCloneQuestion","renderButtonGroup","position","left","label","icon","isRound","onClick","disabled","length","sections","description","shuffle","Section","question","index","Question","App","Header","Teacher","ReactDOM","render","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.548fb918.chunk.js","sourcesContent":["import { Box, Checkbox, Text} from '@chakra-ui/react'\r\nimport { Component } from 'react'\r\n\r\nclass SectionPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Box borderWidth='1px' boxShadow='base' borderRadius='lg' overflow='hidden' w='5xl'>\r\n            <Box p='6' pt='3'>\r\n                <Box\r\n                mt='1'\r\n                fontWeight='semibold'\r\n                as='h4'\r\n                lineHeight='tight'\r\n                isTruncated\r\n                >\r\n                Section Name\r\n                </Box>\r\n\r\n                <Box>\r\n                Description\r\n                <Box as='span' color='gray.600' fontSize='sm'>\r\n                    &nbsp; (optional)\r\n                </Box>\r\n                </Box>\r\n            </Box>\r\n          <Box m='5' as='span' color='gray.600' fontSize='sm'>\r\n            <Checkbox mb='3'>\r\n              <Text color='gray.600' fontSize='sm'>\r\n                Shuffle Questions\r\n              </Text>\r\n            </Checkbox>\r\n          </Box>\r\n        </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionPage;\r\n","import { Component } from 'react'\r\nimport { AddIcon } from \"@chakra-ui/icons\"\r\nimport { Stack } from \"@chakra-ui/layout\";\r\nimport { Divider, Box, SimpleGrid, Select, Input, \r\n    FormHelperText, FormControl, RadioGroup, Radio, Button, Checkbox,\r\n    Textarea, InputRightAddon, InputGroup\r\n} from '@chakra-ui/react'\r\nimport { FilePond } from 'react-filepond';\r\nimport 'filepond/dist/filepond.min.css';\r\n\r\nclass QuestionPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedQuestionType: 'single',\r\n            radioValues : ['A', 'B', 'C'],\r\n            newRadioValue: '',\r\n            checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n            newCheckValue: '',\r\n            totalMarks: 0,\r\n            negativeMarks: 0\r\n        }\r\n    }\r\n\r\n    handleKeyDownForRadio = (event) => {\r\n        if (event.key === 'Enter') {\r\n            let radioValues = this.state.radioValues;\r\n            console.log('existingRadioValues', radioValues)\r\n\r\n            radioValues.push(this.state.newRadioValue);\r\n            console.log('updatedRadioValues', radioValues)\r\n            this.setState({\r\n                ...this.state,\r\n                radioValues: radioValues,\r\n                newRadioValue: ''\r\n            })\r\n        }\r\n    }\r\n\r\n  handleKeyDownForCheck = (event) => {\r\n    if (event.key === 'Enter') {\r\n        let checkValues = this.state.checkValues;\r\n        console.log('existingcheckValues', checkValues)\r\n\r\n        checkValues.push(this.state.newCheckValue);\r\n        console.log('updatedcheckValues', checkValues)\r\n        this.setState({\r\n            ...this.state,\r\n            checkValues: checkValues,\r\n            newCheckValue: ''\r\n        })\r\n    }\r\n  }\r\n\r\n  handleNewRadioValueChange = (event) => {\r\n    this.setState({\r\n        ...this.state,\r\n        newRadioValue: event.target.value\r\n    })\r\n  }\r\n\r\n  handleNewCheckValueChange = (event) => {\r\n    this.setState({\r\n        ...this.state,\r\n        newCheckValue: event.target.value\r\n    })\r\n  }\r\n\r\n  renderSingleChoice = () => {\r\n    return (\r\n        <>\r\n            <RadioGroup mt='4'>\r\n                <Stack direction='column'>\r\n                    {this.state.radioValues.map(value => {\r\n                        return (\r\n                            <Radio value={value}>\r\n                                <Input size='sm' value={value} variant='outline' w='80'/>\r\n                            </Radio>\r\n                        )\r\n                    })}\r\n                </Stack>\r\n            </RadioGroup>\r\n            <Input \r\n                size='sm' ml='6' mt='2' \r\n                placeholder='Add option..' variant='outline' w='80'\r\n                onChange={this.handleNewRadioValueChange}\r\n                onKeyDown={this.handleKeyDownForRadio}\r\n                value={this.state.newRadioValue}\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderMultipleChoice = () => {\r\n    return (\r\n        <>\r\n            <Stack direction='column' mt='2'>\r\n                {this.state.checkValues.map(value => {\r\n                    return (\r\n                        <Checkbox colorScheme='green' size='sm'>\r\n                            <Input size='sm' \r\n                                value={this.state.newCheckValue}\r\n                                placeholder='Add option..'\r\n                                variant='outline' w='80'\r\n                                value={value}\r\n                            />\r\n                        </Checkbox>\r\n                    )\r\n                })}\r\n            </Stack>\r\n            <Input \r\n                size='sm' ml='5' mt='2' \r\n                placeholder='Add option..' variant='outline' w='80'\r\n                onChange={this.handleNewCheckValueChange}\r\n                onKeyDown={this.handleKeyDownForCheck}\r\n                value={this.state.newCheckValue}\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderParagraph = () => {\r\n    return (\r\n        <>\r\n            <Textarea\r\n                mt='2'\r\n                placeholder='Begin typing..'\r\n                size='sm'\r\n                resize\r\n                h='32'\r\n                variant='filled'\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderFileUpload = () => {\r\n    return (\r\n        <>\r\n            <Divider borderColor='black' orientation='horizontal' mb='10' mt='2'/>\r\n            <FilePond\r\n                allowMultiple={true}\r\n                maxParallelUploads={5}\r\n                name='images'\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n    handleQuestionTypeChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedQuestionType: event.target.value\r\n        })\r\n    }\r\n\r\n    handleTotalMarksChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            totalMarks: event.target.value\r\n        })\r\n    }\r\n\r\n    handleNegativeMarksChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            negativeMarks: event.target.value\r\n        })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <Box p='6' borderWidth='1px' boxShadow='base' borderRadius='lg' overflow='hidden' w='5xl' mb='2'>\r\n            <SimpleGrid columns={3} spacing={10}>\r\n                <Box height='240px'>\r\n                <Stack>\r\n                    <FormControl mt='2'>\r\n                        <Select placeholder='Select Question Type'\r\n                            value={this.state.selectedQuestionType}\r\n                            onChange={this.handleQuestionTypeChange}\r\n                            size='sm' variant='filled' w='40'\r\n                        >\r\n                            <option value='single'>Single</option>\r\n                            <option value='multiple'>Multiple</option>\r\n                            <option value='paragraph'>Paragraph</option>\r\n                            <option value='upload'>File Upload</option>\r\n                        </Select>\r\n                        <FormHelperText mt='4'>Total marks</FormHelperText>\r\n                        <InputGroup size='sm'>\r\n                            <Input placeholder='enter marks' value={this.state.totalMarks} w='24' \r\n                                onChange={this.handleTotalMarksChange}/>\r\n                            <InputRightAddon  children='marks' />\r\n                        </InputGroup>\r\n                        <FormHelperText>Negative marks</FormHelperText>\r\n                        <InputGroup size='sm'>\r\n                            <Input size='sm' placeholder='enter marks' value={this.state.negativeMarks} w='24'\r\n                                onChange={this.handleNegativeMarksChange}\r\n                            />\r\n                            <InputRightAddon  children='marks' />\r\n                        </InputGroup>\r\n                        <br/>\r\n                        <Button size='sm' ml='2' leftIcon={<AddIcon color='red.500'/>} variant='ghost'>\r\n                            Add Optional\r\n                        </Button>\r\n                    </FormControl>\r\n                </Stack>\r\n                </Box>\r\n                <Divider ml='-30' borderColor='black' orientation='vertical' />\r\n                <Box height='120px' ml='-310'>\r\n                <FormControl>\r\n                    What is the size of the earth?\r\n                    {this.state.selectedQuestionType==='single' && this.renderSingleChoice()}\r\n                    {this.state.selectedQuestionType==='multiple' && this.renderMultipleChoice()}\r\n                    {this.state.selectedQuestionType==='paragraph' && this.renderParagraph()}\r\n                    {this.state.selectedQuestionType==='upload' && this.renderFileUpload()}\r\n                </FormControl>\r\n                </Box>\r\n            </SimpleGrid>\r\n        </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionPage;\r\n","import { Component } from 'react'\r\nimport { EmailIcon, ArrowForwardIcon } from \"@chakra-ui/icons\"\r\nimport { Text, Stack, Flex, VStack, Heading, HStack, Spacer } from \"@chakra-ui/layout\";\r\nimport { Divider, Button, SimpleGrid, Icon, Tooltip } from '@chakra-ui/react'\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { GrGallery } from \"react-icons/gr\";\r\nimport Section from '../components/Section'\r\nimport Question from '../components/Question'\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { ImCopy } from \"react-icons/im\";\r\nimport { BiTrashAlt } from \"react-icons/bi\";\r\nimport { RiSpotifyLine } from \"react-icons/ri\";\r\n\r\nclass TeacherPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questions: [\r\n                {\r\n                    selectedQuestionType: 'single',\r\n                    radioValues : ['A', 'B', 'C'],\r\n                    newRadioValue: '',\r\n                    checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n                    newCheckValue: '',\r\n                    totalMarks: 0,\r\n                    negativeMarks: 0\r\n                },\r\n                {\r\n                    selectedQuestionType: 'single',\r\n                    radioValues : ['A', 'B', 'C'],\r\n                    newRadioValue: '',\r\n                    checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n                    newCheckValue: '',\r\n                    totalMarks: 0,\r\n                    negativeMarks: 0\r\n                }\r\n            ],\r\n            sections: [\r\n                {\r\n                    name: 'Section 1',\r\n                    description: 'New section 1',\r\n                    shuffle: true\r\n                },\r\n                {\r\n                    name: 'Section 2',\r\n                    description: 'New section 2',\r\n                    shuffle: false\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    handleAddQuestion = () => {\r\n        let questionsArray = this.state.questions;\r\n        let newQuestionObject = {\r\n            selectedQuestionType: 'single',\r\n            radioValues : [],\r\n            newRadioValue: '',\r\n            checkValues: [],\r\n            newCheckValue: '',\r\n            totalMarks: 0,\r\n            negativeMarks: 0\r\n        }\r\n        questionsArray.push(newQuestionObject)\r\n        this.setState({\r\n            ...this.state,\r\n            questions: questionsArray\r\n        })\r\n    }\r\n\r\n    handleDeleteQuestion = () => {\r\n        let questionsArray = this.state.questions;\r\n        questionsArray.shift()\r\n        this.setState({\r\n            ...this.state,\r\n            questions: questionsArray\r\n        })\r\n    }\r\n\r\n    handleCloneQuestion = () => {\r\n        let questionsArray = this.state.questions;\r\n        questionsArray.push(questionsArray[0])\r\n        this.setState({\r\n            ...this.state,\r\n            questions: questionsArray\r\n        })\r\n    }\r\n\r\n    renderButtonGroup = () => {\r\n        return (\r\n            <VStack position='relative' left='35%'>\r\n                <Tooltip label=\"Add a new question\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        icon={<AiOutlinePlusCircle />} \r\n                        isRound='true'\r\n                        onClick={this.handleAddQuestion} \r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Add images\">\r\n                    <IconButton size='sm' ml={2} icon={<GrGallery />} isRound='true' ></IconButton>\r\n                </Tooltip>\r\n                <Tooltip label=\"Clone question\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        ml={2} \r\n                        icon={<ImCopy />} \r\n                        isRound='true' \r\n                        onClick={this.handleCloneQuestion} \r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Delete question\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        ml={2} \r\n                        icon={<BiTrashAlt />} \r\n                        isRound='true'\r\n                        onClick={this.handleDeleteQuestion}\r\n                        disabled={this.state.questions.length===1}\r\n                        />\r\n                </Tooltip>\r\n                <Tooltip label=\"Add a new section\">\r\n                    <IconButton size='sm' ml={2} icon={<RiSpotifyLine />} isRound='true' ></IconButton>\r\n                </Tooltip>\r\n            </VStack>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        console.log('state in Teacher', this.state)\r\n        return (\r\n            <Stack p={5} ml=\"20\" mt=\"-7\">\r\n                <Text color=\"black\" >\r\n                    Create Questions\r\n                </Text>\r\n                <Divider borderColor='black' orientation='horizontal' />\r\n                <Section />\r\n                <SimpleGrid columns={2}>\r\n                    {this.state.questions.length>0 && (this.state.questions.map((question, index) => {\r\n                        return (\r\n                            <>\r\n                                <Question key={index}/>\r\n                                {index===0 && this.renderButtonGroup()}\r\n                                {index!=0 && (<br />)}\r\n                            </>\r\n                        )\r\n                    }))}\r\n                </SimpleGrid>\r\n            </Stack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeacherPage;\r\n","import { Flex, VStack, Heading} from \"@chakra-ui/layout\";\r\nimport { Component } from 'react'\r\n\r\nclass SectionPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n  render() {\r\n        return (\r\n            <VStack p={5}>\r\n                <Flex w=\"100%\">\r\n                    <Heading ml=\"20\" fontSize=\"2xl\" fontWeight='semibold'>Edvora</Heading>\r\n                </Flex>\r\n            </VStack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionPage;\r\n","import Teacher from '../src/components/Teacher';\r\nimport Header from '../src/components/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Teacher />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <ColorModeScript initialColorMode=\"light\"></ColorModeScript>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}