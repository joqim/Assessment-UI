{"version":3,"sources":["components/Section.js","components/Question.js","components/Teacher.js","components/Header.js","App.js","index.js"],"names":["SectionPage","props","componentDidMount","sectionValues","setState","state","name","description","shuffle","sectionIndex","componentWillReceiveProps","nextProps","newProps","handleSectionNameChange","event","target","value","handleSectionDescriptionChange","handleSectionShuffleChange","checked","console","log","this","borderWidth","boxShadow","borderRadius","overflow","w","p","pt","ml","mt","fontWeight","as","lineHeight","isTruncated","fontSize","variant","placeholder","onChange","color","m","borderColor","colorScheme","mb","Component","QuestionPage","boxHeight","questionValue","isMandatoryGiven","mandatory","length","toString","question","selectedQuestionType","radioValues","newRadioValue","checkValues","newCheckValue","totalMarks","negativeMarks","questionIndex","handleKeyDownForRadio","key","push","handleKeyDownForCheck","handleNewRadioValueChange","handleNewCheckValueChange","handleRadioOptionChange","index","renderSingleChoice","isChecked","direction","map","radioValueIndex","onClick","size","bg","textAlign","String","fromCharCode","parseInt","splice","backgroundColor","readOnly","onKeyDown","renderMultipleChoice","checkValueIndex","id","renderParagraph","resize","h","renderFileUpload","orientation","handleQuestionTypeChange","handleTotalMarksChange","handleNegativeMarksChange","handleMandatoryNumberChange","iterations","i","type","handleQuestionChange","handleMandQuestionChange","mandatoryArray","renderButtonGroup","spacing","addQuestion","cloneQuestion","deleteQuestion","addNewSection","handleQuestionClick","columns","height","mr","pointerEvents","children","leftIcon","overflowY","mand","mandKey","TeacherPage","handlePublishClicked","handleAddQuestion","sectionsArray","sections","sectionObject","questionsArray","questions","handleDeleteQuestion","handleCloneQuestion","handleAddNewSection","isPublishClicked","section","Section","Question","App","Header","Teacher","ReactDOM","render","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d378016.chunk.js","sourcesContent":["import { Box, Checkbox, Text, Input} from '@chakra-ui/react'\r\nimport { Component } from 'react'\r\nimport '../css/style.css'\r\n\r\nclass SectionPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      description: '',\r\n      shuffle: false,\r\n      sectionIndex: null\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    //console.log('inside section comp did mount' , this.props.sectionIndex)\r\n    let props = this.props.sectionValues;\r\n    this.setState({\r\n      ...this.state,\r\n      name: props.name,\r\n      description: props.description,\r\n      shuffle: props.shuffle,\r\n      sectionIndex: this.props.sectionIndex\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    //console.log('props inside componentWillReceiveProps', nextProps.sectionValues.name, nextProps.sectionIndex)\r\n    let newProps = nextProps.sectionValues\r\n    // if(newProps.name && newProps.description && newProps.shuffle) {\r\n      //console.log('setting state for', nextProps.sectionIndex, 'as', newProps.name)\r\n      this.setState({\r\n        ...this.state,\r\n        name: newProps.name,\r\n        description: newProps.description,\r\n        shuffle: newProps.shuffle,\r\n        sectionIndex: nextProps.sectionIndex\r\n      })\r\n    // }\r\n  }\r\n\r\n  handleSectionNameChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      name: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSectionDescriptionChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      description: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSectionShuffleChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      shuffle: event.target.checked\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log('state in section', this.state, 'section Index', this.state.sectionIndex)\r\n    return (\r\n        <Box borderWidth='1px' boxShadow='base' borderRadius='lg' overflow='hidden' w='5xl'>\r\n          <Box p='6' pt='3' ml='5'>\r\n            <Box\r\n            mt='1'\r\n            fontWeight='semibold'\r\n            as='h4'\r\n            lineHeight='tight'\r\n            isTruncated\r\n            >\r\n              <Input\r\n                fontSize='2xl'\r\n                variant='unstyled' \r\n                placeholder='Section Name' \r\n                value={this.state.name}\r\n                onChange={this.handleSectionNameChange}\r\n              />\r\n              </Box>\r\n\r\n              <Box color='gray.600'>\r\n                <Input \r\n                  variant='unstyled' \r\n                  placeholder='Description(optional)' \r\n                  value={this.state.description}\r\n                  onChange={this.handleSectionDescriptionChange}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          <Box m='5' as='span' color='gray.600' fontSize='sm'>\r\n            <Checkbox \r\n              borderColor='#733D47' \r\n              colorScheme='green' \r\n              mb='3' \r\n              checked={this.state.shuffle} \r\n              onChange={this.handleSectionShuffleChange}\r\n              >\r\n              <Text color='#733D47' fontSize='sm'>\r\n                Shuffle Questions\r\n              </Text>\r\n            </Checkbox>\r\n          </Box>\r\n        </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionPage;\r\n","import { Component } from 'react'\r\nimport { Stack, Text } from \"@chakra-ui/layout\";\r\nimport { Divider, Box, SimpleGrid, Select, Input, \r\n    FormHelperText, FormControl, RadioGroup, Radio, Button, Checkbox,\r\n    Textarea, InputRightAddon, InputGroup, Tooltip, VStack, InputRightElement, InputLeftElement\r\n} from '@chakra-ui/react'\r\n// import { FilePond } from 'react-filepond';\r\nimport 'filepond/dist/filepond.min.css';\r\nimport { AiFillPlusCircle, AiFillCopy } from \"react-icons/ai\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { BiTrashAlt } from \"react-icons/bi\";\r\nimport { RiSpotifyLine } from \"react-icons/ri\";\r\nimport { IoMdAddCircle, IoMdImage } from \"react-icons/io\";\r\nimport { IoCloseCircleSharp } from \"react-icons/io5\";\r\nimport '../css/style.css'\r\n\r\nclass QuestionPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            selectedQuestionType: 'single',\r\n            radioValues : ['A', 'B', 'C'],\r\n            newRadioValue: '',\r\n            checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n            newCheckValue: '',\r\n            totalMarks: 0,\r\n            negativeMarks: 0,\r\n            mandatory: [],\r\n            boxHeight: '240',\r\n            isMandatoryGiven: false,\r\n            renderButtonGroup: false,\r\n            questionIndex: null,\r\n            sectionIndex: null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let props = this.props.questionValue;\r\n        //console.log('question value in component mound', props)\r\n        let isMandatoryGiven = false;\r\n        let mandatory = [];\r\n        let boxHeight;\r\n        if(props.mandatory && props.mandatory.length>0) {\r\n            boxHeight = 240 + 270*props.mandatory.length\r\n            boxHeight = boxHeight.toString()\r\n            mandatory = props.mandatory;\r\n            isMandatoryGiven = true\r\n        } else {\r\n            boxHeight='260px'\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            question: props.question,\r\n            selectedQuestionType: props.selectedQuestionType,\r\n            radioValues: props.radioValues,\r\n            newRadioValue: props.newRadioValue,\r\n            checkValues: props.checkValues,\r\n            newCheckValue: props.newCheckValue,\r\n            totalMarks: props.totalMarks,\r\n            negativeMarks: props.negativeMarks,\r\n            mandatory: mandatory,\r\n            boxHeight,\r\n            isMandatoryGiven,\r\n            questionIndex: this.props.questionIndex,\r\n            sectionIndex: this.props.sectionIndex\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n            let props = nextProps.questionValue;\r\n            let isMandatoryGiven = false;\r\n            let mandatory = [];\r\n            let boxHeight;\r\n            if(props.mandatory && props.mandatory.length>0) {\r\n                boxHeight = 240 + 270*props.mandatory.length\r\n                boxHeight = boxHeight.toString()\r\n                mandatory = props.mandatory;\r\n                isMandatoryGiven = true\r\n            } else {\r\n                boxHeight='260px'\r\n            }\r\n            this.setState({\r\n                ...this.state,\r\n                question: props.question,\r\n                selectedQuestionType: props.selectedQuestionType,\r\n                radioValues: props.radioValues,\r\n                newRadioValue: props.newRadioValue,\r\n                checkValues: props.checkValues,\r\n                newCheckValue: props.newCheckValue,\r\n                totalMarks: props.totalMarks,\r\n                negativeMarks: props.negativeMarks,\r\n                mandatory: mandatory,\r\n                boxHeight,\r\n                isMandatoryGiven,\r\n                questionIndex: nextProps.questionIndex,\r\n                sectionIndex: nextProps.sectionIndex\r\n            })\r\n    }\r\n\r\n    handleKeyDownForRadio = (event) => {\r\n        if (event.key === 'Enter' || event.key === 'Tab') {\r\n            let radioValues = this.state.radioValues;\r\n            console.log('existingRadioValues', radioValues)\r\n\r\n            radioValues.push(this.state.newRadioValue);\r\n            console.log('updatedRadioValues', radioValues)\r\n            this.setState({\r\n                ...this.state,\r\n                radioValues: radioValues,\r\n                newRadioValue: ''\r\n            })\r\n        }\r\n    }\r\n\r\n  handleKeyDownForCheck = (event) => {\r\n    if (event.key === 'Enter' || event.key === 'Tab') {\r\n        let checkValues = this.state.checkValues;\r\n        console.log('existingcheckValues', checkValues)\r\n\r\n        checkValues.push(this.state.newCheckValue);\r\n        console.log('updatedcheckValues', checkValues)\r\n        this.setState({\r\n            ...this.state,\r\n            checkValues: checkValues,\r\n            newCheckValue: ''\r\n        })\r\n    }\r\n  }\r\n\r\n  handleNewRadioValueChange = (event) => {\r\n    this.setState({\r\n        ...this.state,\r\n        newRadioValue: event.target.value\r\n    })\r\n  }\r\n\r\n  handleNewCheckValueChange = (event) => {\r\n    this.setState({\r\n        ...this.state,\r\n        newCheckValue: event.target.value\r\n    })\r\n  }\r\n\r\n  handleRadioOptionChange = (index, value) => {\r\n    console.log('inside handleRadioOptionChange', index, value)\r\n  }\r\n\r\n  renderSingleChoice = (radioValues) => {\r\n    //console.log('inside renderSingleChoice')\r\n    //let radioValues = this.state.radioValues\r\n    let isChecked = false;\r\n    return (\r\n        <>\r\n            <RadioGroup mt='4' ml='2'>\r\n                <Stack direction='column'>\r\n                    {radioValues.map((value, radioValueIndex) => {\r\n                        return (\r\n                            <Radio \r\n                                value={value} \r\n                                key={radioValueIndex}\r\n                                onClick={() => {\r\n                                    isChecked = true;\r\n                                    console.log('isChecked', isChecked);\r\n                                }}\r\n                                >\r\n                                <InputGroup w='80' size='sm'>\r\n                                    <InputLeftElement>\r\n                                        <Box bg='#733D47' w='5' textAlign='center' color='white' borderRadius='sm'>\r\n                                            {String.fromCharCode(65 + parseInt(radioValueIndex))}\r\n                                        </Box>\r\n                                    </InputLeftElement>\r\n                                    <InputRightElement  color='#BF9B9B'>\r\n                                        <IoCloseCircleSharp\r\n                                            size='22'\r\n                                            onClick={() => {\r\n                                                if (radioValueIndex > -1) {\r\n                                                    radioValues.splice(radioValueIndex, 1);\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    radioValues\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                    </InputRightElement>\r\n                                    {console.log('isChecked before input', isChecked)}\r\n                                    {isChecked && (\r\n                                        <Input\r\n                                            size='sm' \r\n                                            value={value}\r\n                                            color='#733D47'\r\n                                            backgroundColor='#F2D8D5'\r\n                                            w='80'\r\n                                            readOnly\r\n                                            //onChange={() => this.handleRadioOptionChange(radioValueIndex, value)}\r\n                                        />\r\n                                    )}\r\n                                    {!isChecked && (\r\n                                        <Input\r\n                                            size='sm'\r\n                                            value={value}\r\n                                            color='#733D47'\r\n                                            w='80'\r\n                                            readOnly\r\n                                            //onChange={() => this.handleRadioOptionChange(radioValueIndex, value)}\r\n                                        />\r\n                                    )}\r\n                                    \r\n                                </InputGroup>\r\n                            </Radio>                            \r\n                        )\r\n                    })}\r\n                </Stack>\r\n            </RadioGroup>\r\n            <Input \r\n                size='sm' ml='8' mt='2' \r\n                placeholder='Add option..' variant='outline' w='80'\r\n                fontWeight='thin'\r\n                onChange={this.handleNewRadioValueChange}\r\n                onKeyDown={this.handleKeyDownForRadio}\r\n                value={this.state.newRadioValue}\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderMultipleChoice = (checkValues) => {\r\n    return (\r\n        <>\r\n            <Stack direction='column' mt='4' ml='2'>\r\n                {checkValues.map((value, checkValueIndex) => {\r\n                    return (\r\n                        <Checkbox size='sm' key={checkValueIndex}>\r\n                            <InputGroup w='80' size='sm'>\r\n                                <InputLeftElement>\r\n                                    <Box bg='#733D47' w='5' textAlign='center' color='white' borderRadius='sm'>\r\n                                        {String.fromCharCode(65 + parseInt(checkValueIndex))}\r\n                                    </Box>\r\n                                </InputLeftElement>\r\n                                <InputRightElement  color='#BF9B9B'>\r\n                                    <IoCloseCircleSharp\r\n                                        size='22'\r\n                                        onClick={() => {\r\n                                            if (checkValueIndex > -1) {\r\n                                                checkValues.splice(checkValueIndex, 1);\r\n                                            }\r\n                                            this.setState({\r\n                                                ...this.state,\r\n                                                checkValues\r\n                                            })\r\n                                        }} \r\n                                    />\r\n                                </InputRightElement>\r\n                                <Input \r\n                                    size='sm'\r\n                                    id='checkBoxInput'\r\n                                    value={this.state.newCheckValue}\r\n                                    placeholder='Add option..'\r\n                                    variant='outline' w='80'\r\n                                    value={value}\r\n                                    readOnly\r\n                                />\r\n                            </InputGroup>\r\n                        </Checkbox>\r\n                    )\r\n                })}\r\n            </Stack>\r\n            <Input \r\n                size='sm' ml='7' mt='2' \r\n                placeholder='Add option..' variant='outline' w='80'\r\n                onChange={this.handleNewCheckValueChange}\r\n                onKeyDown={this.handleKeyDownForCheck}\r\n                value={this.state.newCheckValue}\r\n                fontWeight='thin'\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderParagraph = () => {\r\n    return (\r\n        <>\r\n            <Textarea\r\n                bg='#F2D8D5'\r\n                mt='2'\r\n                placeholder='Paragraph'\r\n                size='sm'\r\n                resize\r\n                h='32'\r\n                variant='filled'\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderFileUpload = () => {\r\n    return (\r\n        <>\r\n            <Divider borderColor='#733D47' orientation='horizontal' mb='10' mt='2'/>\r\n            {/* <FilePond\r\n                bg='#F2D8D5 !important'\r\n                allowMultiple={true}\r\n                maxParallelUploads={5}\r\n                name='images'\r\n            /> */}\r\n            <Text \r\n                fontSize='32'\r\n                fontWeight='light'\r\n                textAlign='center'\r\n                color='#BF9B9B'\r\n            >File Upload</Text>\r\n        </>\r\n    )\r\n  }\r\n\r\n    handleQuestionTypeChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedQuestionType: event.target.value\r\n        })\r\n    }\r\n\r\n    handleTotalMarksChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            totalMarks: event.target.value\r\n        })\r\n    }\r\n\r\n    handleNegativeMarksChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            negativeMarks: event.target.value\r\n        })\r\n    }\r\n\r\n    handleMandatoryNumberChange = (event) => {\r\n        //console.log('inside mand num change', event.target.value)\r\n        let boxHeight;\r\n        let mandatory = [];\r\n        let iterations = event.target.value\r\n        if(!iterations) {\r\n            iterations = 0\r\n        }\r\n        console.log('iterations', iterations)\r\n        for(let i=0; i<parseInt(iterations); i++) {\r\n            if(parseInt(iterations) <=10) {\r\n                //prevent infinite rendering\r\n                let object = {\r\n                    question:'',\r\n                    type: 'single'\r\n                }\r\n                mandatory.push(object)\r\n            }\r\n        }\r\n        if(mandatory.length>0) {\r\n            boxHeight = 240 + 270*mandatory.length\r\n            boxHeight = boxHeight.toString()\r\n        } else {\r\n            boxHeight='270px'\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            boxHeight,\r\n            mandatory\r\n        })\r\n    }\r\n\r\n    handleQuestionChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            question: event.target.value\r\n        })\r\n    }\r\n\r\n    handleMandQuestionChange = (event) => {\r\n        //console.log('inside handleMandQuestionChange');\r\n        console.log(event.target.name);\r\n        console.log(event.target.value);\r\n        let mandatoryArray = this.state.mandatory;\r\n        mandatoryArray[event.target.name].question = event.target.value;\r\n        //console.log('mandatoryArray', mandatoryArray)\r\n        // let name = event.target.name;\r\n        // let value = event.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            mandatory: mandatoryArray\r\n        })\r\n    }\r\n\r\n    renderButtonGroup = () => {\r\n        //console.log('inside renderBButtonGroup in child', this.state.sectionIndex);\r\n        let questionIndex = this.state.questionIndex;\r\n        let sectionIndex = this.state.sectionIndex;\r\n        return (\r\n            <>\r\n                <Box bg='#733D47' w='10' h='210' ml='470' borderRadius='lg'>\r\n                    <VStack mt='2' spacing='5'>\r\n                        {/* <Tooltip label=\"Add a new question\"> */}\r\n                            <AiFillPlusCircle\r\n                                size='22'\r\n                                color='#F2D8D5'\r\n                                onClick={() => this.props.addQuestion(sectionIndex, questionIndex)} \r\n                            />\r\n                        {/* </Tooltip>\r\n                        <Tooltip label=\"Add images\"> */}\r\n                            <IoMdImage\r\n                                size='22'\r\n                                color='#F2D8D5'\r\n                            />\r\n                        {/* </Tooltip>\r\n                        <Tooltip label=\"Clone question\"> */}\r\n                            <AiFillCopy\r\n                                size='22'\r\n                                color='#F2D8D5'\r\n                                onClick={() => this.props.cloneQuestion(sectionIndex, questionIndex)} \r\n                            />\r\n                        {/* </Tooltip>\r\n                        <Tooltip label=\"Delete question\"> */}\r\n                            <FaTrash\r\n                                size='22'\r\n                                color='#F2D8D5'\r\n                                onClick={() => this.props.deleteQuestion(sectionIndex, questionIndex)}\r\n                            />\r\n                        {/* </Tooltip>\r\n                        <Tooltip label=\"Add a new section\"> */}\r\n                            <RiSpotifyLine\r\n                                size='22'\r\n                                color='#F2D8D5' \r\n                                onClick={() => this.props.addNewSection(sectionIndex, questionIndex)}\r\n                            />\r\n                        {/* </Tooltip> */}\r\n                    </VStack>\r\n                </Box>\r\n            </>\r\n        )\r\n    }\r\n\r\n    handleQuestionClick = () => {\r\n        this.renderButtonGroup()\r\n    }\r\n\r\n  render() {\r\n    console.log('state in question', this.state)\r\n    return (\r\n        <>\r\n        <Box onClick={() => this.setState({\r\n            ...this.state,\r\n            renderButtonGroup: true\r\n        })} p='6' \r\n        borderWidth='1px' boxShadow='base' borderRadius='lg' overflow='hidden' \r\n        w='5xl' mb='2'\r\n        >\r\n            <SimpleGrid columns={3} spacing={10}>\r\n                <Box height={this.state.boxHeight}>\r\n                <Stack>\r\n                    <FormControl mt='2'>\r\n                        <Select placeholder='Select Question Type'\r\n                            color='#733D47'\r\n                            variant='filled'\r\n                            bg='#F2D8D5'\r\n                            value={this.state.selectedQuestionType}\r\n                            onChange={this.handleQuestionTypeChange}\r\n                            size='sm' variant='filled' w='40'\r\n                        >\r\n                            <option value='single'>Single</option>\r\n                            <option value='multiple'>Multiple</option>\r\n                            <option value='paragraph'>Paragraph</option>\r\n                            <option value='upload'>File Upload</option>\r\n                        </Select>\r\n                        <FormHelperText mt='4' color='#733D47' fontSize='12'>Total marks</FormHelperText>\r\n                        <InputGroup w='40' size='sm' borderColor='#733D47'>\r\n                            <InputRightElement\r\n                                color='#BF9B9B'\r\n                                mr='2'\r\n                                pointerEvents='none'\r\n                                children='marks'\r\n                            />\r\n                            <Input \r\n                                placeholder='enter marks' \r\n                                textAlign='center' \r\n                                value={this.state.totalMarks} \r\n                                color='#733D47'\r\n                                onChange={this.handleTotalMarksChange}\r\n                            />\r\n                        </InputGroup>\r\n\r\n                        <FormHelperText color='#733D47' fontSize='12'>Negative marks</FormHelperText>\r\n                        <InputGroup w='40' size='sm' borderColor='#733D47'>\r\n                            <InputRightElement\r\n                                color='#BF9B9B'\r\n                                mr='2'\r\n                                pointerEvents='none'\r\n                                children='marks'\r\n                            />\r\n                            <Input \r\n                                placeholder='enter marks' \r\n                                textAlign='center' \r\n                                value={this.state.negativeMarks} \r\n                                color='#733D47'\r\n                                onChange={this.handleNegativeMarksChange}\r\n                            />\r\n                        </InputGroup>\r\n                        {this.state.isMandatoryGiven && (\r\n                            <>\r\n                                <FormHelperText fontSize='12.5' mt='2' color='#733D47'>Number of questions mandatory to attempt</FormHelperText>\r\n                                <InputGroup w='40' size='sm' borderColor='#733D47'>\r\n                                    <InputRightElement\r\n                                        color='#BF9B9B'\r\n                                        mr='5'\r\n                                        pointerEvents='none'\r\n                                        children='questions'\r\n                                    />\r\n                                    <Input \r\n                                        placeholder='enter number' \r\n                                        textAlign='center' \r\n                                        value={this.state.mandatory.length} \r\n                                        color='#733D47'\r\n                                        onChange={this.handleMandatoryNumberChange}\r\n                                    />\r\n                                </InputGroup>\r\n                            </>\r\n                        )}\r\n                        <br/>\r\n                        <Button size='md' color='#733D47' leftIcon={<IoMdAddCircle/>} variant='ghost'>\r\n                            Add Optional\r\n                        </Button>\r\n                    </FormControl>\r\n                </Stack>\r\n                </Box>\r\n                <Divider ml='-30' borderColor='black' orientation='vertical' />\r\n                <Box height={this.state.boxHeight} ml='-310' overflowY='scroll'>\r\n                    <FormControl>\r\n                        <Input\r\n                            color='#733D47'\r\n                            size='sm'\r\n                            fontWeight='medium'\r\n                            placeholder='Type your question here..'\r\n                            value={this.state.question} \r\n                            onChange={this.handleQuestionChange}\r\n                            variant='unstyled'\r\n                        />\r\n                        {this.state.selectedQuestionType==='single' && this.renderSingleChoice(this.state.radioValues)}\r\n                        {this.state.selectedQuestionType==='multiple' && this.renderMultipleChoice(this.state.checkValues)}\r\n                        {this.state.selectedQuestionType==='paragraph' && this.renderParagraph()}\r\n                        {this.state.selectedQuestionType==='upload' && this.renderFileUpload()}\r\n\r\n                        {this.state.mandatory.length>0 && this.state.mandatory.map( (mand, mandKey) => {\r\n                            if(mand.type==='single') {\r\n                                return (\r\n                                    <>\r\n                                        <Text\r\n                                            fontSize='1xl' \r\n                                            textAlign='center' \r\n                                            mt='5'\r\n                                            mb='2'\r\n                                        >-OR-</Text>\r\n                                        <Input \r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            name={mandKey}\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleMandQuestionChange}\r\n                                            variant='unstyled'\r\n                                            fontWeight='medium'\r\n                                            color='#733D47'\r\n                                        />\r\n                                        {this.renderSingleChoice(this.state.mandatory[mandKey].radioValues)}\r\n                                    </>\r\n                                )\r\n                            } else if(mand.type==='multiple') {\r\n                                return (\r\n                                    <>\r\n                                        <Text fontSize='1xl' textAlign='center' mt='5'>-OR-</Text>\r\n                                        <Input\r\n                                            key={mandKey}\r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleQuestionChange}\r\n                                            variant='unstyled'\r\n                                            fontWeight='medium'\r\n                                            color='#733D47'\r\n                                        />\r\n\r\n                                        {this.renderMultipleChoice(this.state.mandatory[mandKey].checkValues)}\r\n                                    </>      \r\n                                )\r\n                            } else if(mand.type==='paragraph') {\r\n                                return (\r\n                                    <>\r\n                                        <Text fontSize='1xl' textAlign='center' mt='5'>-OR-</Text>\r\n                                        <Input \r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleQuestionChange}\r\n                                            variant='unstyled'\r\n                                            readOnly\r\n                                        />\r\n                                        {this.renderParagraph()}\r\n                                    </>         \r\n                                )\r\n                            } else if(mand.type==='upload') {\r\n                                return (\r\n                                    <>\r\n                                        <Text fontSize='1xl' textAlign='center' mt='5'>-OR-</Text>\r\n                                        <Input \r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleQuestionChange}\r\n                                            variant='unstyled'\r\n                                            readOnly\r\n                                        />\r\n                                        {this.renderFileUpload()}\r\n                                    </>         \r\n                                )\r\n                            }\r\n                        })}\r\n                    </FormControl>\r\n                </Box>\r\n            </SimpleGrid>\r\n        </Box>\r\n        {this.state.renderButtonGroup && (this.renderButtonGroup())}\r\n        {!this.state.renderButtonGroup && <br />}\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionPage;\r\n","import { Component } from 'react'\r\nimport { EmailIcon, ArrowForwardIcon } from \"@chakra-ui/icons\"\r\nimport { Text, Stack, Flex, VStack, Heading, HStack, Spacer, Box } from \"@chakra-ui/layout\";\r\nimport { Divider, Button, SimpleGrid, Icon, Tooltip } from '@chakra-ui/react'\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { GrGallery } from \"react-icons/gr\";\r\nimport Section from '../components/Section'\r\nimport Question from '../components/Question'\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { ImCopy } from \"react-icons/im\";\r\nimport { BiTrashAlt } from \"react-icons/bi\";\r\nimport { RiSpotifyLine } from \"react-icons/ri\";\r\n\r\nclass TeacherPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPublishClicked: false,\r\n            sections: [\r\n                {\r\n                    name: 'React basics',\r\n                    description: 'Fundamental questions on React',\r\n                    shuffle: true,\r\n                    questions: [\r\n                        {\r\n                            question: 'What of the following is used in React.js to increase performance?',\r\n                            selectedQuestionType: 'single',\r\n                            radioValues : ['Original DOM', 'Virtual DOM', 'Both A and B', 'None of the above'],\r\n                            newRadioValue: '',\r\n                            checkValues: ['Original DOM', 'Virtual DOM', 'Both A and B', 'None of the above'],\r\n                            newCheckValue: '',\r\n                            totalMarks: 0,\r\n                            negativeMarks: 0\r\n                        },\r\n                        {\r\n                            question: 'Which of the following keyword is used to create a class inheritance?',\r\n                            selectedQuestionType: 'multiple',\r\n                            radioValues : ['Create', 'Inherits', 'Extends', 'This'],\r\n                            newRadioValue: '',\r\n                            checkValues: ['Create', 'Inherits', 'Extends', 'This'],\r\n                            newCheckValue: '',\r\n                            totalMarks: 0,\r\n                            negativeMarks: 0\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Webpack basics',\r\n                    description: 'Fundamental questions on Webpack',\r\n                    shuffle: false,\r\n                    questions: [\r\n                        {\r\n                            question: 'What is the use of \"webpack\" command in React.js?',\r\n                            selectedQuestionType: 'single',\r\n                            radioValues : [\r\n                                'Transpile all JavaScript', \r\n                                'Runs React local development server', \r\n                                'Module bundler',\r\n                                'None of the above'\r\n                            ],\r\n                            newRadioValue: '',\r\n                            checkValues: [\r\n                                'Transpile all the JavaScript',\r\n                                'Runs React local development server',\r\n                                'Module bundler'\r\n                            ],\r\n                            newCheckValue: '',\r\n                            totalMarks: 0,\r\n                            negativeMarks: 0,\r\n                            mandatory: [\r\n                                {\r\n                                    question:'What is the default port where webpack-server runs?',\r\n                                    type: 'single',\r\n                                    radioValues: ['3000', '8080', '3030', '6060'],\r\n                                    checkValues: ['3000', '8080', '3030', '6060']\r\n                                },\r\n                                {\r\n                                    question: 'What is Babel?',\r\n                                    type: 'multiple',\r\n                                    radioValues: ['Javascript transpiler', 'Javascript interpreter', 'Javascript compiler'],\r\n                                    checkValues: ['Javascript transpiler', 'Javascript interpreter', 'Javascript compiler']\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    handlePublishClicked = () => {\r\n        // let gotThis = this.sectionIndex.current.getAlert();\r\n        // console.log('gotThis', gotThis)\r\n    }\r\n\r\n    handleAddQuestion = (sectionIndex, questionIndex) => {\r\n        console.log('inside handleAddQuestion in parent', sectionIndex, questionIndex)\r\n        let sectionsArray = this.state.sections;\r\n        let sectionObject = sectionsArray[sectionIndex];\r\n        let questionsArray = sectionObject.questions;\r\n        let newQuestionObject = {\r\n            question: '',\r\n            selectedQuestionType: 'single',\r\n            radioValues : [],\r\n            newRadioValue: '',\r\n            checkValues: [],\r\n            newCheckValue: '',\r\n            totalMarks: 0,\r\n            negativeMarks: 0\r\n        }\r\n        questionsArray.splice(questionIndex+1, 0, newQuestionObject);\r\n        console.log('updated questionsArray', questionsArray)\r\n        //questionsArray.push(newQuestionObject)\r\n        sectionObject.questions = questionsArray\r\n        console.log('sectionObject', sectionObject)\r\n        sectionsArray[sectionIndex] = sectionObject\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    handleDeleteQuestion = (sectionIndex, questionIndex) => {\r\n        console.log('questionIndex in delete', questionIndex)\r\n        let sectionsArray = this.state.sections;\r\n        let sectionObject = sectionsArray[sectionIndex];\r\n        let questionsArray = sectionObject.questions;\r\n        questionsArray.splice(questionIndex, 1);\r\n        //questionsArray.shift()\r\n        sectionObject.questions = questionsArray\r\n        sectionsArray[sectionIndex] = sectionObject\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    handleCloneQuestion = (sectionIndex, questionIndex) => {\r\n        let sectionsArray = this.state.sections;\r\n        let sectionObject = sectionsArray[sectionIndex];\r\n        let questionsArray = sectionObject.questions;\r\n        questionsArray.splice(questionIndex+1, 0, questionsArray[questionIndex]);\r\n        sectionObject.questions = questionsArray\r\n        sectionsArray[sectionIndex] = sectionObject\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    handleAddNewSection = (sectionIndex, questionIndex) => {\r\n        let newSectionObject = {\r\n            name: '',\r\n            description: '',\r\n            shuffle: false,\r\n            questions: [\r\n                {\r\n                    question: '',\r\n                    selectedQuestionType: 'single',\r\n                    radioValues : [],\r\n                    newRadioValue: '',\r\n                    checkValues: [],\r\n                    newCheckValue: '',\r\n                    totalMarks: 0,\r\n                    negativeMarks: 0\r\n                }\r\n            ]\r\n        }\r\n        let sectionsArray = this.state.sections;\r\n        sectionsArray.splice(sectionIndex+1, 0, newSectionObject);\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('state in Teacher', this.state)\r\n        return (\r\n            <Stack p={5} ml=\"20\" mt=\"-7\">\r\n                <Text color=\"black\" >\r\n                    Create Questions\r\n                </Text>\r\n                <Divider borderColor='black' orientation='horizontal' />\r\n                {this.state.sections.length>0 && (this.state.sections.map((section, sectionIndex) => {\r\n                    console.log('passing section', this.state.sections[sectionIndex].name)\r\n                    return (\r\n                        <>\r\n                            <Section\r\n                                key={sectionIndex} \r\n                                sectionValues={this.state.sections[sectionIndex]}\r\n                                sectionIndex={sectionIndex}\r\n                            />\r\n                            <SimpleGrid columns={2}>\r\n                                {section.questions.length>0 && (section.questions.map((question, questionIndex) => {\r\n                                    //console.log('passing question', section.questions)\r\n                                    return (\r\n                                        <>\r\n                                            <Question\r\n                                                key={questionIndex} \r\n                                                questionValue={this.state.sections[sectionIndex].questions[questionIndex]}\r\n                                                questionIndex={questionIndex}\r\n                                                sectionIndex={sectionIndex}\r\n                                                addQuestion={this.handleAddQuestion}\r\n                                                deleteQuestion={this.handleDeleteQuestion}\r\n                                                cloneQuestion={this.handleCloneQuestion}\r\n                                                addNewSection={this.handleAddNewSection}\r\n                                            />\r\n                                        </>\r\n                                    )\r\n                                }))}\r\n                            </SimpleGrid>\r\n                            <br/>\r\n                            {sectionIndex!=this.state.sections.length-1 && (\r\n                                <>\r\n                                    <Text fontSize='24' fontWeight='thin' textAlign='center' mt='5' color='#BF9B9B'>-SECTION BREAK-</Text>\r\n                                </>                                    \r\n                            )}\r\n                        </>\r\n                    )\r\n                }))}\r\n                <Flex>\r\n                    <Spacer />\r\n                    <Box>\r\n                        <Button color='#BF9B9B' fontWeight='thin' variant='ghost' size='sm' mr='5'>\r\n                            Discard\r\n                        </Button>\r\n                        <Button\r\n                            backgroundColor='#733D47'\r\n                            color='#FFFFFF'\r\n                            variant='solid' \r\n                            size='sm'\r\n                            mr='24'\r\n                            fontWeight='thin'\r\n                            onClick={this.handlePublishClicked}>\r\n                            Publish\r\n                        </Button>\r\n                    </Box>\r\n                </Flex>\r\n            </Stack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeacherPage;\r\n","import { Flex, VStack, Heading} from \"@chakra-ui/layout\";\r\nimport { Component } from 'react'\r\n\r\nclass SectionPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n  render() {\r\n        return (\r\n            <VStack p={5}>\r\n                <Flex w=\"100%\">\r\n                    <Heading ml=\"20\" fontSize=\"2xl\" fontWeight='semibold'>Edvora</Heading>\r\n                </Flex>\r\n            </VStack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionPage;\r\n","import Teacher from '../src/components/Teacher';\r\nimport Header from '../src/components/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Teacher />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <ColorModeScript initialColorMode=\"light\"></ColorModeScript>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}