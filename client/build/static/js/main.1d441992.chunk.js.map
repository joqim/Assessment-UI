{"version":3,"sources":["components/Section.js","components/Question.js","components/Teacher.js","components/Header.js","App.js","index.js"],"names":["SectionPage","props","componentDidMount","console","log","sectionValues","setState","state","name","description","shuffle","handleSectionNameChange","event","target","value","handleSectionDescriptionChange","handleSectionShuffleChange","checked","this","borderWidth","boxShadow","borderRadius","overflow","w","p","pt","mt","fontWeight","as","lineHeight","isTruncated","variant","placeholder","onChange","color","m","fontSize","mb","Component","QuestionPage","boxHeight","questionValue","isMandatoryGiven","mandatory","length","toString","question","selectedQuestionType","radioValues","newRadioValue","checkValues","newCheckValue","totalMarks","negativeMarks","handleKeyDownForRadio","key","push","handleKeyDownForCheck","handleNewRadioValueChange","handleNewCheckValueChange","renderSingleChoice","direction","map","radioValueIndex","size","readOnly","label","ml","icon","isRound","onClick","splice","onKeyDown","renderMultipleChoice","checkValueIndex","colorScheme","renderParagraph","resize","h","renderFileUpload","borderColor","orientation","allowMultiple","maxParallelUploads","handleQuestionTypeChange","handleTotalMarksChange","handleNegativeMarksChange","handleMandatoryNumberChange","iterations","i","parseInt","type","handleQuestionChange","handleMandQuestionChange","mandatoryArray","columns","spacing","height","children","max","leftIcon","mand","mandKey","textAlign","TeacherPage","handlePublishClicked","handleAddQuestion","sectionIndex","questionIndex","sectionsArray","sections","sectionObject","questionsArray","questions","handleDeleteQuestion","shift","handleCloneQuestion","handleAddNewSection","renderButtonGroup","position","left","disabled","isPublishClicked","section","Section","Question","mr","App","Header","Teacher","ReactDOM","render","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d441992.chunk.js","sourcesContent":["import { Box, Checkbox, Text, Input} from '@chakra-ui/react'\r\nimport { Component } from 'react'\r\n\r\nclass SectionPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      description: '',\r\n      shuffle: false\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    console.log('inside component did mount - section')\r\n    let props = this.props.sectionValues;\r\n    this.setState({\r\n      ...this.state,\r\n      name: props.name,\r\n      description: props.description,\r\n      shuffle: props.shuffle\r\n    })\r\n  }\r\n\r\n  handleSectionNameChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      name: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSectionDescriptionChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      description: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSectionShuffleChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      shuffle: event.target.checked\r\n    })\r\n  }\r\n\r\n  getAlert() {\r\n    return this.state;\r\n  }\r\n\r\n  render() {\r\n    console.log('props in section', this.props)\r\n    return (\r\n        <Box borderWidth='1px' boxShadow='base' borderRadius='lg' overflow='hidden' w='5xl'>\r\n            <Box p='6' pt='3'>\r\n                <Box\r\n                mt='1'\r\n                fontWeight='semibold'\r\n                as='h4'\r\n                lineHeight='tight'\r\n                isTruncated\r\n                >\r\n                  <Input \r\n                    variant='unstyled' \r\n                    placeholder='Enter section name' \r\n                    value={this.state.name}\r\n                    onChange={this.handleSectionNameChange}\r\n                  />\r\n                </Box>\r\n\r\n                <Box color='gray.600'>\r\n                  <Input \r\n                    variant='unstyled' \r\n                    placeholder='Enter description name (optional)' \r\n                    value={this.state.description}\r\n                    onChange={this.handleSectionDescriptionChange}\r\n                  />\r\n                {/* <Box as='span' color='gray.600' fontSize='sm'>\r\n                    &nbsp; (optional)\r\n                </Box> */}\r\n                </Box>\r\n            </Box>\r\n          <Box m='5' as='span' color='gray.600' fontSize='sm'>\r\n            <Checkbox mb='3' checked={this.state.shuffle} onChange={this.handleSectionShuffleChange}>\r\n              <Text color='gray.600' fontSize='sm'>\r\n                Shuffle Questions\r\n              </Text>\r\n            </Checkbox>\r\n          </Box>\r\n        </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionPage;\r\n","import { Component } from 'react'\r\nimport { AddIcon } from \"@chakra-ui/icons\"\r\nimport { Stack, Text } from \"@chakra-ui/layout\";\r\nimport { Divider, Box, SimpleGrid, Select, Input, \r\n    FormHelperText, FormControl, RadioGroup, Radio, Button, Checkbox,\r\n    Textarea, InputRightAddon, InputGroup, Tooltip\r\n} from '@chakra-ui/react'\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { FilePond } from 'react-filepond';\r\nimport 'filepond/dist/filepond.min.css';\r\nimport { MdRemoveCircleOutline } from \"react-icons/md\";\r\n\r\nclass QuestionPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            selectedQuestionType: 'single',\r\n            radioValues : ['A', 'B', 'C'],\r\n            newRadioValue: '',\r\n            checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n            newCheckValue: '',\r\n            totalMarks: 0,\r\n            negativeMarks: 0,\r\n            mandatory: [],\r\n            boxHeight: '240',\r\n            isMandatoryGiven: false\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let props = this.props.questionValue;\r\n        let isMandatoryGiven = false;\r\n        let mandatory = [];\r\n        let boxHeight;\r\n        if(props.mandatory && props.mandatory.length>0) {\r\n            boxHeight = 240 + 260*props.mandatory.length\r\n            boxHeight = boxHeight.toString()\r\n            mandatory = props.mandatory;\r\n            isMandatoryGiven = true\r\n        } else {\r\n            boxHeight='260px'\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            question: props.question,\r\n            selectedQuestionType: props.selectedQuestionType,\r\n            radioValues: props.radioValues,\r\n            newRadioValue: props.newRadioValue,\r\n            checkValues: props.checkValues,\r\n            newCheckValue: props.newCheckValue,\r\n            totalMarks: props.totalMarks,\r\n            negativeMarks: props.negativeMarks,\r\n            mandatory: mandatory,\r\n            boxHeight,\r\n            isMandatoryGiven\r\n        })\r\n    }\r\n\r\n    handleKeyDownForRadio = (event) => {\r\n        if (event.key === 'Enter' || event.key === 'Tab') {\r\n            let radioValues = this.state.radioValues;\r\n            console.log('existingRadioValues', radioValues)\r\n\r\n            radioValues.push(this.state.newRadioValue);\r\n            console.log('updatedRadioValues', radioValues)\r\n            this.setState({\r\n                ...this.state,\r\n                radioValues: radioValues,\r\n                newRadioValue: ''\r\n            })\r\n        }\r\n    }\r\n\r\n  handleKeyDownForCheck = (event) => {\r\n    if (event.key === 'Enter' || event.key === 'Tab') {\r\n        let checkValues = this.state.checkValues;\r\n        console.log('existingcheckValues', checkValues)\r\n\r\n        checkValues.push(this.state.newCheckValue);\r\n        console.log('updatedcheckValues', checkValues)\r\n        this.setState({\r\n            ...this.state,\r\n            checkValues: checkValues,\r\n            newCheckValue: ''\r\n        })\r\n    }\r\n  }\r\n\r\n  handleNewRadioValueChange = (event) => {\r\n    this.setState({\r\n        ...this.state,\r\n        newRadioValue: event.target.value\r\n    })\r\n  }\r\n\r\n  handleNewCheckValueChange = (event) => {\r\n    this.setState({\r\n        ...this.state,\r\n        newCheckValue: event.target.value\r\n    })\r\n  }\r\n\r\n//   handleRadioOptionChange = (event, radioIndex) => {\r\n//     console.log('inside handleRadioOptionChange', radioIndex)\r\n//     let existingRadioValues = this.state.radioValues;\r\n//   }\r\n\r\n  renderSingleChoice = () => {\r\n      console.log('inside renderSingleChoice')\r\n    return (\r\n        <>\r\n            <RadioGroup mt='4'>\r\n                <Stack direction='column'>\r\n                    {this.state.radioValues.map((value, radioValueIndex) => {\r\n                        return (\r\n                            <Radio \r\n                                value={value} \r\n                                key={radioValueIndex}>\r\n                                <Input \r\n                                    size='sm' \r\n                                    value={value} \r\n                                    variant='outline' \r\n                                    w='80'\r\n                                    readOnly\r\n                                    //onChange={() => this.handleRadioOptionChange(radioValueIndex)}\r\n                                />\r\n                                <Tooltip label=\"Delete option\">\r\n                                    <IconButton\r\n                                        color='red'\r\n                                        ml='2' \r\n                                        size='sm' \r\n                                        icon={<MdRemoveCircleOutline />} \r\n                                        isRound='true'\r\n                                        onClick={() => {\r\n                                            let radioValues = this.state.radioValues;\r\n                                            if (radioValueIndex > -1) {\r\n                                                radioValues.splice(radioValueIndex, 1);\r\n                                            }\r\n                                            this.setState({\r\n                                                ...this.state,\r\n                                                radioValues\r\n                                            })\r\n                                        }} \r\n                                    />\r\n                                </Tooltip>\r\n                            </Radio>                            \r\n                        )\r\n                    })}\r\n                </Stack>\r\n            </RadioGroup>\r\n            <Input \r\n                size='sm' ml='6' mt='2' \r\n                placeholder='Add option..' variant='outline' w='80'\r\n                onChange={this.handleNewRadioValueChange}\r\n                onKeyDown={this.handleKeyDownForRadio}\r\n                value={this.state.newRadioValue}\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderMultipleChoice = () => {\r\n    return (\r\n        <>\r\n            <Stack direction='column' mt='4'>\r\n                {this.state.checkValues.map((value, checkValueIndex) => {\r\n                    return (\r\n                        <Checkbox colorScheme='green' size='sm' key={checkValueIndex}>\r\n                            <Input size='sm' \r\n                                value={this.state.newCheckValue}\r\n                                placeholder='Add option..'\r\n                                variant='outline' w='80'\r\n                                value={value}\r\n                                readOnly\r\n                            />\r\n                            <Tooltip label=\"Delete option\">\r\n                                <IconButton\r\n                                    color='red'\r\n                                    ml='2' \r\n                                    size='sm' \r\n                                    icon={<MdRemoveCircleOutline />} \r\n                                    isRound='true'\r\n                                    onClick={() => {\r\n                                        let checkValues = this.state.checkValues;\r\n                                        if (checkValueIndex > -1) {\r\n                                            checkValues.splice(checkValueIndex, 1);\r\n                                        }\r\n                                        this.setState({\r\n                                            ...this.state,\r\n                                            checkValues\r\n                                        })\r\n                                    }} \r\n                                />\r\n                            </Tooltip>\r\n                        </Checkbox>\r\n                    )\r\n                })}\r\n            </Stack>\r\n            <Input \r\n                size='sm' ml='5' mt='2' \r\n                placeholder='Add option..' variant='outline' w='80'\r\n                onChange={this.handleNewCheckValueChange}\r\n                onKeyDown={this.handleKeyDownForCheck}\r\n                value={this.state.newCheckValue}\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderParagraph = () => {\r\n    return (\r\n        <>\r\n            <Textarea\r\n                mt='2'\r\n                placeholder='Begin typing..'\r\n                size='sm'\r\n                resize\r\n                h='32'\r\n                variant='filled'\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n  renderFileUpload = () => {\r\n    return (\r\n        <>\r\n            <Divider borderColor='black' orientation='horizontal' mb='10' mt='2'/>\r\n            <FilePond\r\n                allowMultiple={true}\r\n                maxParallelUploads={5}\r\n                name='images'\r\n            />\r\n        </>\r\n    )\r\n  }\r\n\r\n    handleQuestionTypeChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedQuestionType: event.target.value\r\n        })\r\n    }\r\n\r\n    handleTotalMarksChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            totalMarks: event.target.value\r\n        })\r\n    }\r\n\r\n    handleNegativeMarksChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            negativeMarks: event.target.value\r\n        })\r\n    }\r\n\r\n    handleMandatoryNumberChange = (event) => {\r\n        console.log('inside mand num change', event.target.value)\r\n        let boxHeight;\r\n        let mandatory = [];\r\n        let iterations = event.target.value\r\n        if(!iterations) {\r\n            iterations = 0\r\n        }\r\n        console.log('iterations', iterations)\r\n        for(let i=0; i<parseInt(iterations); i++) {\r\n            if(parseInt(iterations) <=10) {\r\n                //prevent infinite rendering\r\n                let object = {\r\n                    question:'',\r\n                    type: 'single'\r\n                }\r\n                mandatory.push(object)\r\n            }\r\n        }\r\n        if(mandatory.length>0) {\r\n            boxHeight = 240 + 260*mandatory.length\r\n            boxHeight = boxHeight.toString()\r\n        } else {\r\n            boxHeight='260px'\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            boxHeight,\r\n            mandatory\r\n        })\r\n    }\r\n\r\n    handleQuestionChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            question: event.target.value\r\n        })\r\n    }\r\n\r\n    handleMandQuestionChange = (event) => {\r\n        console.log('inside handleMandQuestionChange');\r\n        console.log(event.target.name);\r\n        console.log(event.target.value);\r\n        let mandatoryArray = this.state.mandatory;\r\n        mandatoryArray[event.target.name].question = event.target.value;\r\n        console.log('mandatoryArray', mandatoryArray)\r\n        // let name = event.target.name;\r\n        // let value = event.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            mandatory: mandatoryArray\r\n        })\r\n    }\r\n\r\n  render() {\r\n    console.log('state in question', this.state)\r\n    return (\r\n        <Box p='6' borderWidth='1px' boxShadow='base' borderRadius='lg' overflow='hidden' w='5xl' mb='2'>\r\n            <SimpleGrid columns={3} spacing={10}>\r\n                <Box height={this.state.boxHeight}>\r\n                <Stack>\r\n                    <FormControl mt='2'>\r\n                        <Select placeholder='Select Question Type'\r\n                            value={this.state.selectedQuestionType}\r\n                            onChange={this.handleQuestionTypeChange}\r\n                            size='sm' variant='filled' w='40'\r\n                        >\r\n                            <option value='single'>Single</option>\r\n                            <option value='multiple'>Multiple</option>\r\n                            <option value='paragraph'>Paragraph</option>\r\n                            <option value='upload'>File Upload</option>\r\n                        </Select>\r\n                        <FormHelperText mt='4'>Total marks</FormHelperText>\r\n                        <InputGroup size='sm'>\r\n                            <Input placeholder='enter marks' value={this.state.totalMarks} w='24' \r\n                                onChange={this.handleTotalMarksChange}/>\r\n                            <InputRightAddon  children='marks' />\r\n                        </InputGroup>\r\n                        <FormHelperText>Negative marks</FormHelperText>\r\n                        <InputGroup size='sm'>\r\n                            <Input size='sm' placeholder='enter marks' value={this.state.negativeMarks} w='24'\r\n                                onChange={this.handleNegativeMarksChange}\r\n                            />\r\n                            <InputRightAddon  children='marks' />\r\n                        </InputGroup>\r\n                        {this.state.isMandatoryGiven && (\r\n                            <>\r\n                                <FormHelperText>Number of questions mandatory to attempt</FormHelperText>\r\n                                <InputGroup size='sm'>\r\n                                    <Input\r\n                                        type='number'\r\n                                        max='5'\r\n                                        size='sm' \r\n                                        placeholder='enter number' \r\n                                        value={this.state.mandatory.length} \r\n                                        w='24'\r\n                                        onChange={this.handleMandatoryNumberChange}\r\n                                    />\r\n                                    <InputRightAddon  children='question' />\r\n                                </InputGroup>\r\n                            </>\r\n                        )}\r\n                        <br/>\r\n                        <Button size='sm' ml='2' leftIcon={<AddIcon color='red.500'/>} variant='ghost'>\r\n                            Add Optional\r\n                        </Button>\r\n                    </FormControl>\r\n                </Stack>\r\n                </Box>\r\n                <Divider ml='-30' borderColor='black' orientation='vertical' />\r\n                <Box height='120px' ml='-310'>\r\n                    <FormControl>\r\n                        <Input \r\n                            size='sm' \r\n                            placeholder='Enter question'\r\n                            value={this.state.question} \r\n                            onChange={this.handleQuestionChange}\r\n                            variant='unstyled'\r\n                        />\r\n                        {this.state.selectedQuestionType==='single' && this.renderSingleChoice()}\r\n                        {this.state.selectedQuestionType==='multiple' && this.renderMultipleChoice()}\r\n                        {this.state.selectedQuestionType==='paragraph' && this.renderParagraph()}\r\n                        {this.state.selectedQuestionType==='upload' && this.renderFileUpload()}\r\n\r\n                        {this.state.mandatory.length>0 && this.state.mandatory.map( (mand, mandKey) => {\r\n                            if(mand.type==='single') {\r\n                                return (\r\n                                    <>\r\n                                        <Text\r\n                                            fontSize='1xl' \r\n                                            textAlign='center' \r\n                                            mt='5'\r\n                                        >-OR-</Text>\r\n                                        <Input \r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            name={mandKey}\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleMandQuestionChange}\r\n                                            variant='unstyled'\r\n                                        />\r\n                                        {this.renderSingleChoice()}\r\n                                    </>\r\n                                )\r\n                            } else if(mand.type==='multiple') {\r\n                                return (\r\n                                    <>\r\n                                        <Input\r\n                                            key={mandKey}\r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleQuestionChange}\r\n                                            variant='unstyled'\r\n                                            readOnly\r\n                                        />\r\n                                        <Text fontSize='2xl' textAlign='center' mt='5'>-OR-</Text>\r\n                                        {this.renderMultipleChoice()}\r\n                                    </>      \r\n                                )\r\n                            } else if(mand.type==='paragraph') {\r\n                                return (\r\n                                    <>\r\n                                        <Input \r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleQuestionChange}\r\n                                            variant='unstyled'\r\n                                            readOnly\r\n                                        />\r\n                                        <Text fontSize='2xl' textAlign='center' mt='5'>-OR-</Text>\r\n                                        {this.renderParagraph()}\r\n                                    </>         \r\n                                )\r\n                            } else if(mand.type==='upload') {\r\n                                return (\r\n                                    <>\r\n                                        <Input \r\n                                            size='sm' \r\n                                            placeholder='Enter question'\r\n                                            value={this.state.mandatory[mandKey].question} \r\n                                            onChange={this.handleQuestionChange}\r\n                                            variant='unstyled'\r\n                                            readOnly\r\n                                        />\r\n                                        <Text fontSize='2xl' textAlign='center' mt='5'>-OR-</Text>\r\n                                        {this.renderFileUpload()}\r\n                                    </>         \r\n                                )\r\n                            }\r\n                        })}\r\n                    </FormControl>\r\n                </Box>\r\n            </SimpleGrid>\r\n        </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionPage;\r\n","import { Component } from 'react'\r\nimport { EmailIcon, ArrowForwardIcon } from \"@chakra-ui/icons\"\r\nimport { Text, Stack, Flex, VStack, Heading, HStack, Spacer, Box } from \"@chakra-ui/layout\";\r\nimport { Divider, Button, SimpleGrid, Icon, Tooltip } from '@chakra-ui/react'\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { GrGallery } from \"react-icons/gr\";\r\nimport Section from '../components/Section'\r\nimport Question from '../components/Question'\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { ImCopy } from \"react-icons/im\";\r\nimport { BiTrashAlt } from \"react-icons/bi\";\r\nimport { RiSpotifyLine } from \"react-icons/ri\";\r\n\r\nclass TeacherPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPublishClicked: false,\r\n            sections: [\r\n                {\r\n                    name: 'Section 1',\r\n                    description: 'New section 1',\r\n                    shuffle: true,\r\n                    questions: [\r\n                        {\r\n                            question: 'Sample question 1 ?',\r\n                            selectedQuestionType: 'single',\r\n                            radioValues : ['A', 'B', 'C'],\r\n                            newRadioValue: '',\r\n                            checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n                            newCheckValue: '',\r\n                            totalMarks: 0,\r\n                            negativeMarks: 0\r\n                        },\r\n                        {\r\n                            question: 'Sample question 2',\r\n                            selectedQuestionType: 'multiple',\r\n                            radioValues : ['D', 'E', 'F'],\r\n                            newRadioValue: '',\r\n                            checkValues: ['Option 4', 'Option 5', 'Option 6'],\r\n                            newCheckValue: '',\r\n                            totalMarks: 0,\r\n                            negativeMarks: 0\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Section 2',\r\n                    description: 'New section 2',\r\n                    shuffle: false,\r\n                    questions: [\r\n                        {\r\n                            question: 'Sample question 3',\r\n                            selectedQuestionType: 'single',\r\n                            radioValues : ['H', 'I', 'J'],\r\n                            newRadioValue: '',\r\n                            checkValues: ['Option 7', 'Option 8', 'Option 9'],\r\n                            newCheckValue: '',\r\n                            totalMarks: 0,\r\n                            negativeMarks: 0,\r\n                            mandatory: [\r\n                                {\r\n                                    question:'Mand question 1',\r\n                                    type: 'single',\r\n                                    radioValues: ['M1', 'M2', 'M3']\r\n                                },\r\n                                {\r\n                                    question: 'Mand question2 ',\r\n                                    type: 'single'\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    handlePublishClicked = () => {\r\n        // let gotThis = this.sectionIndex.current.getAlert();\r\n        // console.log('gotThis', gotThis)\r\n    }\r\n\r\n    handleAddQuestion = (sectionIndex, questionIndex) => {\r\n        let sectionsArray = this.state.sections;\r\n        let sectionObject = sectionsArray[sectionIndex];\r\n        let questionsArray = sectionObject.questions;\r\n        let newQuestionObject = {\r\n            question: '',\r\n            selectedQuestionType: 'single',\r\n            radioValues : ['Option 1', 'Option 2', 'Option 3'],\r\n            newRadioValue: '',\r\n            checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n            newCheckValue: '',\r\n            totalMarks: 0,\r\n            negativeMarks: 0\r\n        }\r\n        questionsArray.push(newQuestionObject)\r\n        sectionObject.questions = questionsArray\r\n        sectionsArray[sectionIndex] = sectionObject\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    handleDeleteQuestion = (sectionIndex, questionIndex) => {\r\n        console.log('questionIndex in delete', questionIndex)\r\n        let sectionsArray = this.state.sections;\r\n        let sectionObject = sectionsArray[sectionIndex];\r\n        let questionsArray = sectionObject.questions;\r\n        //questionsArray.splice(questionIndex, 1);\r\n        questionsArray.shift()\r\n        sectionObject.questions = questionsArray\r\n        sectionsArray[sectionIndex] = sectionObject\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    handleCloneQuestion = (sectionIndex, questionIndex) => {\r\n        let sectionsArray = this.state.sections;\r\n        let sectionObject = sectionsArray[sectionIndex];\r\n        let questionsArray = sectionObject.questions;\r\n        questionsArray.push(questionsArray[0])\r\n        //questionsArray.push(questionsArray[questionIndex])\r\n        sectionObject.questions = questionsArray\r\n        sectionsArray[sectionIndex] = sectionObject\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    handleAddNewSection = (sectionIndex, questionIndex) => {\r\n        let newSectionObject = {\r\n            name: '',\r\n            description: '',\r\n            shuffle: false,\r\n            questions: [\r\n                {\r\n                    question: '',\r\n                    selectedQuestionType: 'single',\r\n                    radioValues : ['Option 1', 'Option 2', 'Option 3'],\r\n                    newRadioValue: '',\r\n                    checkValues: ['Option 1', 'Option 2', 'Option 3'],\r\n                    newCheckValue: '',\r\n                    totalMarks: 0,\r\n                    negativeMarks: 0\r\n                }\r\n            ]\r\n        }\r\n        let sectionsArray = this.state.sections;\r\n        sectionsArray.push(newSectionObject)\r\n        //when using splice, the sections array is structured as expected\r\n        //but component did mount in section is assuming the final index is the newly added section.\r\n        //sectionsArray.splice(sectionIndex+1, 0, newSectionObject);\r\n        console.log('sectionsArray', sectionsArray)\r\n        this.setState({\r\n            ...this.state,\r\n            sections: sectionsArray\r\n        })\r\n    }\r\n\r\n    renderButtonGroup = (sectionIndex, questionIndex) => {\r\n        return (\r\n            <VStack position='relative' left='35%'>\r\n                <Tooltip label=\"Add a new question\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        icon={<AiOutlinePlusCircle />} \r\n                        isRound='true'\r\n                        onClick={() => this.handleAddQuestion(sectionIndex, questionIndex)} \r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Add images\">\r\n                    <IconButton size='sm' ml={2} icon={<GrGallery />} isRound='true' ></IconButton>\r\n                </Tooltip>\r\n                <Tooltip label=\"Clone question\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        ml={2} \r\n                        icon={<ImCopy />} \r\n                        isRound='true' \r\n                        onClick={() => this.handleCloneQuestion(sectionIndex, questionIndex)} \r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Delete question\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        ml={2} \r\n                        icon={<BiTrashAlt />} \r\n                        isRound='true'\r\n                        onClick={() => this.handleDeleteQuestion(sectionIndex, questionIndex)}\r\n                        disabled={this.state.sections[sectionIndex].questions.length===1}\r\n                        />\r\n                </Tooltip>\r\n                <Tooltip label=\"Add a new section\">\r\n                    <IconButton \r\n                        size='sm' \r\n                        ml={2} \r\n                        icon={<RiSpotifyLine />} \r\n                        isRound='true' \r\n                        onClick={() => this.handleAddNewSection(sectionIndex, questionIndex)}\r\n                    />\r\n                </Tooltip>\r\n            </VStack>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        console.log('state in Teacher', this.state)\r\n        return (\r\n            <Stack p={5} ml=\"20\" mt=\"-7\">\r\n                <Text color=\"black\" >\r\n                    Create Questions\r\n                </Text>\r\n                <Divider borderColor='black' orientation='horizontal' />\r\n                {this.state.sections.length>0 && (this.state.sections.map((section, sectionIndex) => {\r\n                    console.log('sectionIndex', sectionIndex)\r\n                    return (\r\n                        <>\r\n                            <Section\r\n                                key={sectionIndex} \r\n                                sectionValues={this.state.sections[sectionIndex]}\r\n                            />\r\n                            <SimpleGrid columns={2}>\r\n                                {section.questions.length>0 && (section.questions.map((question, questionIndex) => {\r\n                                    return (\r\n                                        <>\r\n                                            <Question \r\n                                                key={questionIndex} \r\n                                                questionValue={this.state.sections[sectionIndex].questions[questionIndex]}\r\n                                            />\r\n                                            {questionIndex===0 && this.renderButtonGroup(sectionIndex, questionIndex)}\r\n                                            {/* {this.renderButtonGroup(sectionIndex, questionIndex)} */}\r\n                                            {questionIndex!=0 && (<br />)}\r\n                                        </>\r\n                                    )\r\n                                }))}\r\n                            </SimpleGrid>\r\n                            <br/>\r\n                            {sectionIndex!=this.state.sections.length-1 && (\r\n                                <>\r\n                                    <Text fontSize='2xl' textAlign='center' mt='5'>-SECTION BREAK-</Text>\r\n                                </>                                    \r\n                            )}\r\n                        </>\r\n                    )\r\n                }))}\r\n                <Flex>\r\n                    <Spacer />\r\n                    <Box>\r\n                        <Button colorScheme='teal' variant='ghost' size='sm' mr='5'>\r\n                            Discard\r\n                        </Button>\r\n                        <Button colorScheme='teal' \r\n                            variant='solid' \r\n                            size='sm'\r\n                            mr='5'\r\n                            onClick={this.handlePublishClicked}>\r\n                            Publish\r\n                        </Button>\r\n                    </Box>\r\n                </Flex>\r\n            </Stack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeacherPage;\r\n","import { Flex, VStack, Heading} from \"@chakra-ui/layout\";\r\nimport { Component } from 'react'\r\n\r\nclass SectionPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n  render() {\r\n        return (\r\n            <VStack p={5}>\r\n                <Flex w=\"100%\">\r\n                    <Heading ml=\"20\" fontSize=\"2xl\" fontWeight='semibold'>Edvora</Heading>\r\n                </Flex>\r\n            </VStack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionPage;\r\n","import Teacher from '../src/components/Teacher';\r\nimport Header from '../src/components/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Teacher />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <ColorModeScript initialColorMode=\"light\"></ColorModeScript>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}